(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))
(define (make-deque) (cons '() '()))
(define (empty-deque? deque) (or (null? (front-ptr deque))
                                 (null? (rear-ptr deque))))

(define (item-value item) (cdar item))
(define (item-set-value! item the-value) (set-cdr! (car item) the-value))
(define (item-prev item) (caar item))
(define (item-set-prev! item the-prev) (set-car! (car item) the-prev))
(define (item-next item) (cdr item))
(define (item-set-next! item the-next) (set-cdr! item the-next))
(define (item-new val) (cons (cons '() val) '()))

(define (front-deque deque)
  (if (empty-deque? deque)
    (error "FRONT called with an empty deque" deque)
    (item-value (front-ptr deque))))

(define (rear-deque deque)
  (if (empty-deque? deque)
    (error "REAR called with an empty deque" deque)
    (item-value (rear-ptr deque))))

(define (front-insert-deque! deque val)
  (let ((item (item-new val)))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque item)
           (set-rear-ptr! deque item)
           deque)
          (else
           (item-set-prev! (front-ptr deque) item)
           (item-set-next! item (front-ptr deque))
           (set-front-ptr! deque item)
           deque))))

(define (rear-insert-deque! deque val)
  (let ((item (item-new val)))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque item)
           (set-rear-ptr! deque item)
           deque)
          (else
           (item-set-prev! item (rear-ptr deque))
           (item-set-next! (rear-ptr deque) item)
           (set-rear-ptr! deque item)
           deque))))

(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "FRONT-DELETE! called with an empty deque" deque))
        (else
         (set-front-ptr! deque (item-next (front-ptr deque)))
         (if (not (empty-deque? deque))
           (item-set-prev! (front-ptr deque) '())
           'done)
         deque)))

(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "REAR-DELETE! called with an empty deque" deque))
        (else
         (set-rear-ptr! deque (item-prev (rear-ptr deque)))
         (if (not (empty-deque? deque))
           (item-set-next! (rear-ptr deque) '())
           'done)
         deque)))

(define (print-deque deque)
  (define (iter item)
    (cond ((null? item)
           (display "\n"))
          (else
           (display (item-value item))
           (display " ")
           (iter (item-next item)))))
  (display "Current deque: ")
  (iter (front-ptr deque)))


(define dq (make-deque))
(front-insert-deque! dq 1)
(rear-insert-deque! dq 2)
(front-insert-deque! dq 3)
(front-insert-deque! dq 4)
(rear-insert-deque! dq 5)
(print-deque dq)
(front-delete-deque! dq)
(front-delete-deque! dq)
(print-deque dq)
(front-insert-deque! dq 10)
(display (front-deque dq))
(display "\n")
(display (rear-deque dq))
(display "\n")
(rear-delete-deque! dq)
(display (rear-deque dq))
(display "\n")
(front-delete-deque! dq)
(print-deque dq)
(rear-delete-deque! dq)
(print-deque dq)
(display (front-deque dq))
(display "\n")
(display (rear-deque dq))
(display "\n")
(print-deque dq)
(rear-delete-deque! dq)
(display (empty-deque? dq))
