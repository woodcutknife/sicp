(define (miller-rabin-prime? n)
  (define (try-times t res)
    (if (= t 0)
      res
      (try-times (- t 1) (and res (try-it (+ 1 (random (- n 1))))))))
  (define (try-it a)
    (= (expmod a (- n 1) #f) 1))
  (define (expmod b e odd-processed?)
    (cond ((= e 0) 1)
          ((is-odd? e) (remainder (* b (expmod b (- e 1) #t)) n))
          (else        (check (expmod b (div e 2) odd-processed?) odd-processed?))))
  (define (check val odd-processed?)
    (if (and (not odd-processed?) 
             (not (= val 1)) 
             (not (= val (- n 1)))
             (= (squmod val) 1))
      0
      (squmod val)))
  (define (squmod x)
    (remainder (* x x) n))
  (cond ((< n 2)      #f)
        ((= n 2)      #t)
        ((is-even? n) #f)
        (else (try-times 10 #t))))

(define (is-odd? n)
  (= (remainder n 2) 1))

(define (is-even? n)
  (= (remainder n 2) 0))
